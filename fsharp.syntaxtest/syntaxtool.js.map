{"version":3,"sources":["../src/syntaxtool.fs"],"names":[],"mappings":";;;;;;;;;;;;;;AAaY;AAAQ;;AACZ;AAGkB;AAElB;AACA;AAEU;AAEC;;AAEX;AAAA;AAAgB,KAAhB,EAAoB,8BAApB;;AAGI;AAAA;;AAEY;AAAA;AAAA;AACJ;AAAM;;AACE,uCAAkB;AAAA,qCAAiB,oCAAjB;AAA0C,iBAA5D;;AACZ;;AAFI;AAAG,aAAH;AADO,SAAH;;AAMC;AACF,mBAAC,yBAAD;;AAEI;AAAA;AAAA;;AAAX;;AACM,+BAAkB;AAAA,6BAAkB,2BAAlB;AAA+B,SAAjD;AACR,KAbF;;AAeJ;;AAGI;;AAGJ;AArCS","file":"syntaxtool.js","sourceRoot":"c:/Users/Jared/Github/owned/ionide-fsgrammar/fsharp.syntaxtest","sourcesContent":["namespace Ionide\nopen Fable.Import\nopen Fable.Import.vscode\nopen Fable.Import.textmate\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Ionide.VSCode.Helpers\n\n\nmodule SyntaxTools =\n        \n    let activate (context:vscode.ExtensionContext) =   \n        let ochan = window.createOutputChannel \"Textmate Tokens\"\n        ochan.show()\n        \n        //let syntaxbin = VSCode.getPluginPath \"Ionide.FSharp.SyntaxTool\"\n        let jsongrammar = context.extensionPath + @\"\\syntaxes\\fsharp.json\"\n        // ochan.appendLine syntaxbin\n        ochan.appendLine context.extensionPath\n        ochan.appendLine jsongrammar\n        \n        let reg = Registry()\n        \n        let gram = reg.loadGrammarFromPathSync jsongrammar\n     \n        ochan.appendLine <| gram.ToString()\n        \n        let tokenizeFile () =\n            vscode.window.showInformationMessage \"inside tokenize file\" |> ignore\n\n            let folder (stk:StackElement,acc:ResizeArray<IToken>) (line:string) =\n                let res = gram.tokenizeLine(line,stk)\n                res.tokens|>Seq.iter(fun t -> ochan.appendLine(String.Concat(t.scopes) ))\n                acc.AddRange res.tokens\n                (res.ruleStack, acc)\n                \n            let editor = vscode.window.activeTextEditor\n            let text = (editor.document.getText()).Split[|'\\n';|]\n        \n            let _,tokens = Array.fold folder (null,ResizeArray()) text\n            tokens |> Seq.iter(fun t -> ochan.appendLine (t.ToString()))     \n            ()\n     \n        vscode.window.setStatusBarMessage \"this is a test\" |> ignore\n        \n        let disposable = \n            commands.registerCommand (\"syntaxTools.TokenizeFile\", \n                tokenizeFile |> unbox) |> ignore\n        \n        context.subscriptions.Add disposable\n        // Promise.create (fun resolve reject ->\n            \n        // |> Promise.onSuccess (fun () -> \n        //     ()\n        // )\n        // |> Promise.onFail (fun error ->\n        //     vscode.window.showErrorMessage(error.ToString()) |> ignore\n        //     ()\n        // ) // prevent unhandled rejected promises\n        // |> ignore\n        ()\n        \n    let deactivate (disposables: Disposable[]) = ()"]}